"
" ~/.vim/vimrc
"

filetype on
filetype plugin on
filetype indent on
syntax on
set nocompatible
set hidden
set viminfo+=n~/.vim/viminfo
try
    set undodir=~/.cache/vim/undo
    set undofile
catch
endtry

" PLUGINS {{{ //////////////////////////////////////////////////////////////////

" "VIM-PLUG AUTO-INSTALL"

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
    Plug 'AlessandroYorba/Sierra'
    Plug 'Xuyuanp/nerdtree-git-plugin'
    Plug 'bling/vim-bufferline'
    Plug 'chrisbra/colorizer'
    Plug 'dense-analysis/ale'
    Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
    Plug 'glts/vim-magnum'
    Plug 'glts/vim-radical'
    Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && npx --yes yarn install' }
    Plug 'jorengarenar/vim-mvvis'
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'junegunn/vim-easy-align'
    Plug 'mattn/calendar-vim'
    Plug 'mbbill/undotree'
    Plug 'mg979/vim-visual-multi'
    Plug 'preservim/nerdtree'
    Plug 'psliwka/vim-smoothie'
    Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
    Plug 'rhysd/rust-doc.vim'
    Plug 'romainl/vim-cool'
    Plug 'rust-lang/rust.vim'
    Plug 'sheerun/vim-polyglot'
    Plug 'svermeulen/vim-subversive'
    Plug 'svermeulen/vim-yoink'
    Plug 'tinted-theming/tinted-vim'
    Plug 'tommcdo/vim-exchange'
    Plug 'tpope/vim-abolish' " required by VIM-SUBVERSIVE
    Plug 'tpope/vim-characterize'
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-surround'
    Plug 'tridactyl/vim-tridactyl'
    Plug 'vimwiki/vimwiki'
    Plug 'wsdjeg/vim-fetch'
    Plug 'xolox/vim-misc'
    Plug 'xolox/vim-session'
call plug#end()


""}}}////////////////////////////////////////////////////////////////////////////

" {{{ SETTINGS /////////////////////////////////////////////////////////////////

" "VISUAL"
set number
set relativenumber
set colorcolumn=0
set lazyredraw

set listchars=tab:>-,trail:Â·,nbsp:_
set list

set sidescroll=8
set noshowmatch
set nospell
set tws=100x50
set noshowmode
set nostartofline
set scrolloff=100

" "CMDLINE"
set showcmd
set showmode
set laststatus=2

" "TABS"
"
" "Team Spaces"
set softtabstop=4
set shiftwidth=4
set expandtab
set smarttab

" "Team Tabs"
" set tabstop=4
" set shiftwidth=4
" set softtabstop=0
" set noexpandtab

set smartindent
set shiftround

" "SEARCH"
set incsearch
set hlsearch
set ignorecase
set smartcase
set wildmenu
set wildmode=list:longest,list:full
set shortmess-=S

" "WRAP & FOLD"
set wrap

" "COMMENTS"
set formatoptions-=c

" "CLIPBOARD"
set clipboard=unnamedplus


" }}} //////////////////////////////////////////////////////////////////////////

" COLORS {{{ ///////////////////////////////////////////////////////////////////

" set background=light
set termguicolors
colorscheme base16-windows-nt
highlight SpecialKey guifg=#333333

let g:loaded_matchparen=1

" Customize fzf colors to match the color scheme                                          
" - fzf#wrap translates this to a set of `--color` options                                 
let g:fzf_colors =                                                                         
\ { 'fg':      ['fg', 'Normal'],                                                           
    \ 'bg':      ['bg', 'Normal'],                                                           
    \ 'hl':      ['fg', 'Comment'],                                                          
    \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],                             
    \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],                                       
    \ 'hl+':     ['fg', 'Statement'],                                                        
    \ 'info':    ['fg', 'PreProc'],                                                          
    \ 'border':  ['fg', 'Ignore'],                                                           
    \ 'prompt':  ['fg', 'Conditional'],                                                      
    \ 'pointer': ['fg', 'Exception'],                                                        
    \ 'marker':  ['fg', 'Keyword'],                                                          
    \ 'spinner': ['fg', 'Label'],                                                            
    \ 'header':  ['fg', 'Comment'] } 

" }}} //////////////////////////////////////////////////////////////////////////

" FUNCTIONS {{{/////////////////////////////////////////////////////////////////

" Delete closed captions
function! DeleteCC()
    :%s/[ -]\{,2}\[.*\] \?//g<CR>
endfunction

" Set C build
function! COptions()
    setlocal commentstring=//\ %s
    " Try to find the build file
    if filereadable(expand("./build.sh"))
        setlocal makeprg=./build.sh\ %
    elseif filereadable(expand("~/dev/c/build.sh"))
        setlocal makeprg=~/dev/c/build.sh\ %
    endif
endfunction

" Replace colorname under cursor with value from .Xresources
function! GetXresColor()
    let l:hex = substitute(system('xrdb -query | grep ' . expand("<cword>") . ' | cut -f 2'), '\n\+$', '', '')
    execute "normal! ciw" . l:hex
endfunction

function! s:find_git_root()
  return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction

command! ProjectFiles execute 'Files' s:find_git_root()

" }}}///////////////////////////////////////////////////////////////////////////

" MAPPINGS {{{ /////////////////////////////////////////////////////////////////

let mapleader = " "

" Y like D
nnoremap Y y$

" run q macro
nnoremap Q @q

xnoremap <Leader>y "+y
nnoremap <Leader>y "+y

" Move per visual line
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Move per real line
nnoremap gj j
nnoremap gk k
vnoremap gj j
vnoremap gk k

" Keep visual selection
xnoremap > >gv
xnoremap < <gv
xnoremap <C-a> <C-a>gv
xnoremap <C-x> <C-x>gv

nnoremap > >>
nnoremap < <<


" Toggle show whitespace
nnoremap <F3> :set list!<CR>
"Remove all trailing whitespace
nnoremap <F4> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>

" Disable/enable automatic comments
nnoremap <Leader>com :set formatoptions-=cro<CR>
nnoremap <Leader>C :set formatoptions+=cro<CR>
inoremap <C-c> <Esc>:set formatoptions-=cro<CR>a<Space>

" Hide search highlights
nnoremap <Leader><Leader> :nohls<CR>

" Open / reload (source) vimrc
nnoremap <Leader>vi :e $MYVIMRC<CR>
" nnoremap <Leader>re :source $MYVIMRC<CR>

" Fix spelling
inoremap <C-s> <Esc>:set spell<CR>a<C-x><C-s>
" Autocomplete line
inoremap <C-l> <C-x><C-l>

" Keep search matches in the middle of the window
nnoremap n nzz
nnoremap N Nzz

" Open non-existing file
noremap gf :e <cfile><CR>

" " System clipboard
" nnoremap <Leader>p "+p
" nnoremap <Leader>P "+P

" Hic sunt dracones
cmap Q<CR> q<CR>
nnoremap Q <NOP>

" Buffer navigation
nnoremap <Leader>j :bn<CR>
nnoremap <Leader>k :bp<CR>
nnoremap <Leader>D :bd<CR>

" Get color hex value from .Xresources and replace color word under cursor
nnoremap <Leader>x :call GetXresColor()<CR>
xnoremap <Leader>x :call GetXresColor()<CR>

" Readline mappings
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-b> <Left>
cnoremap <C-d> <Delete>

" Insert newline
nnoremap <CR> mzo<Esc>g`z<Down>
" Insert newline above
nnoremap <Leader><CR> mzO<Esc>g`z

" Upper-/lowercase word
nnoremap <Leader>u guiw
nnoremap <Leader>U gUiw

" Insert datetime
nnoremap <Leader>date :put =strftime('%d.%m.%Y %H:%M')<CR>

" Open terminal
nnoremap <Leader>t :vertical terminal<CR>

" Inc-/decrement hex or alpha characters
nnoremap <Leader>ia :set nrformats+=alpha<CR>
nnoremap <Leader>iA :set nrformats-=alpha<CR>
nnoremap <Leader>ih :set nrformats+=hex<CR>
nnoremap <Leader>iH :set nrformats-=hex<CR>

" Don't close accidentally
nnoremap ZZ :q

" Erase redundant spaces"
xnoremap <Leader>_ :s/ \+/ /g<CR>gv:s/ $//g<CR>

" Sort selection
xnoremap <Leader>so :sort<CR>
xnoremap <Leader>sn :sort n<CR>

" "VIM-SURROUND"
nnoremap <Leader>' :execute "normal \<Plug>YsurroundiW'"<CR>
nnoremap <Leader>" :execute "normal \<Plug>YsurroundiW\""<CR>
nnoremap <Leader>) :execute "normal \<Plug>YsurroundiW)"<CR>
nnoremap <Leader>( :execute "normal \<Plug>YsurroundiW("<CR>
nnoremap <Leader>] :execute "normal \<Plug>YsurroundiW]"<CR>
nnoremap <Leader>[ :execute "normal \<Plug>YsurroundiW["<CR>
nnoremap <Leader>} :execute "normal \<Plug>YsurroundiW}"<CR>
nnoremap <Leader>{ :execute "normal \<Plug>YsurroundiW{"<CR>

" "EASY-ALIGN"
nmap <Leader>a <Plug>(EasyAlign)
xmap <Leader>a <Plug>(EasyAlign)
nmap <Leader>a:k mzvi}:EasyAlign : { 'stick_to_left': 0, 'left_margin': 1 }<CR>`z
nmap <Leader>a:h mzvi}:EasyAlign : { 'stick_to_left': 1, 'left_margin': 0 }<CR>`z
nmap <Leader>a=k mzvi}:EasyAlign = { 'stick_to_left': 0, 'left_margin': 1 }<CR>`z
nmap <Leader>a=h mzvi}:EasyAlign = { 'stick_to_left': 1, 'left_margin': 0 }<CR>`z

" "SUBVERSIVE"
nmap s           <Plug>(SubversiveSubstitute)
nmap S           <Plug>(SubversiveSubstituteToEndOfLine)
nmap ss          <Plug>(SubversiveSubstituteLine)
nmap <Leader>s   <Plug>(SubversiveSubvertRange)
nmap <Leader>ss  <Plug>(SubversiveSubvertWordRange)
nmap <Leader>cs  <Plug>(SubversiveSubstituteRangeConfirm)
nmap <Leader>css <Plug>(SubversiveSubstituteWordRangeConfirm)
xmap <Leader>s   <Plug>(SubversiveSubvertRange)
xmap s           <Plug>(SubversiveSubstitute)
xmap p           <Plug>(SubversiveSubstitute)
xmap P           <Plug>(SubversiveSubstitute)
xmap <Leader>cs  <Plug>(SubversiveSubstituteRangeConfirm)

" "YOINK"
nmap <C-n>  <Plug>(YoinkPostPasteSwapBack)
nmap <C-p>  <Plug>(YoinkPostPasteSwapForward)
nmap p      <Plug>(YoinkPaste_p)
nmap P      <Plug>(YoinkPaste_P)
nmap gp     <Plug>(YoinkPaste_gp)
nmap gP     <Plug>(YoinkPaste_gP)

" "COLORIZER"
nnoremap <Leader>col :ColorToggle<CR>

" "MVVIS"
vmap <C-h> <Plug>(MvVisLeft)
vmap <C-j> <Plug>(MvVisDown)
vmap <C-k> <Plug>(MvVisUp)
vmap <C-l> <Plug>(MvVisRight)

" "FZF"
nnoremap <silent> <Leader>f :ProjectFiles<CR>
nnoremap <silent> <Leader>F :FZF ~<CR>
nnoremap <silent> <Leader>/ :Rg<CR>
nnoremap <silent> <Leader>B :Buffers<CR>
" Exclude filenames from Rg
command! -bang -nargs=* Rg call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>), 1, {'options': '--delimiter : --nth 4..'}, <bang>0)

" "ALE"
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
nnoremap <Leader>AA :ALEToggle<CR>
nnoremap <Leader>Ad :ALEDetail<CR>
nnoremap <Leader>Ar :ALERename<CR>
nnoremap <Leader>AR :ALEFindReferences<CR>
nnoremap <Leader>Ah :ALEGoToDefinition -split<CR>
nnoremap <Leader>Av :ALEGoToDefinition -vsplit<CR>

" "RADICAL defaults"
" nmap gA <Plug>RadicalView
" xmap gA <Plug>RadicalView
nmap <Leader>dec <Plug>RadicalCoerceToDecimal
nmap <Leader>hex <Plug>RadicalCoerceToHex
nmap <Leader>oct <Plug>RadicalCoerceToOctal
nmap <Leader>bin <Plug>RadicalCoerceToBinary

" "EXCHANGE defaults"
" nremap cx  <Plug>Exchange
" nremap cxx <Plug>Exchange_line
" xremap X   <Plug>Exchange_selection

" "VIM-COMMENTARY defaults"
" gcc Comment out a line
" gc  Comment out a selection / motion

" "VIM-TITLECASE defaults"
" nmap <Leader>gz  <Plug>Titlecase
" nmap <Leader>gzz <Plug>TitlecaseLine
" vmap <Leader>gz  <Plug>Titlecase

" "Nerdtree"
nnoremap <C-t> :NERDTreeToggle<CR>

" }}}///////////////////////////////////////////////////////////////////////////

" OPTIONS {{{///////////////////////////////////////////////////////////////////

" "VIMWIKI"
" Use .md files for vimwiki
let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]
" Make vimwiki markdown links have extension .md for native vim navigation
let g:vimwiki_markdown_link_ext = 1

" "EASY-ALIGN"
" Also align comments
let g:easy_align_ignore_unmatched=0

" "VIM MARKDOWN PREVIEW"
let g:mkdp_echo_preview_url = 1
let vim_markdown_preview_toggle=2
let vim_markdown_preview_hotkey='<A-m>'
let vim_markdown_preview_browser='.local/bin/browser'

" "COLORIZER"
" Don't colorize colornames
let g:colorizer_colornames=0
" Leave colors on bufleave
let g:colorizer_disable_bufleave = 1

" "YOINK"
let  g:yoinkIncludeDeleteOperations=1

" "RUSTFMT"
let g:rustfmt_autosave = 0

" "MVVIS - move selection"
let g:MvVis_mappings = 0

" "FZF"
" This is the default extra key bindings
let g:fzf_action = {
\ 'ctrl-t': 'tab split',
\ 'ctrl-x': 'split',
\ 'ctrl-v': 'vsplit' }

" FLOATING WINDOW
" Required:
" - width [float range [0 ~ 1]] or [integer range [8 ~ ]]
" - height [float range [0 ~ 1]] or [integer range [4 ~ ]]
"
" Optional:
" - xoffset [float default 0.5 range [0 ~ 1]]
" - yoffset [float default 0.5 range [0 ~ 1]]
" - relative [boolean default v:false]
" - border [string default 'rounded']: Border style
"   - 'rounded' / 'sharp' / 'horizontal' / 'vertical' / 'top' / 'bottom' / 'left' / 'right'
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }

" "ALE"
" This keeps the 'gutter' always on so that window size keeps the same between errors/no errors
let g:ale_enabled = 0
" let g:ale_sign_column_always = 1

" "VIM-SESSION"
" Don't save hidden and unloaded buffers in sessions.
set sessionoptions-=buffers
let g:session_command_aliases = 1
let g:session_autosave = 'no'

" "VIM-BUFFERLINE"
let g:bufferline_active_highlight = 'Removed'

" }}}///////////////////////////////////////////////////////////////////////////

" AUTOCMDS {{{//////////////////////////////////////////////////////////////////

augroup AuCmds
    " Clear
    autocmd!

    " GENERAL
    
    au BufEnter * silent! lcd %:p:h

    " Remember position of last edit and return on reopen
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

    " Don't add comment prefixes on newlines (i think)
    au BufEnter * setlocal formatoptions-=cro

    " FILETYPE

    " Vim
    au Filetype vim setlocal foldmethod=marker

    " PHP File Types (WordPress, use tabs)
    au FileType php setlocal noexpandtab

    " JS, Svelte, CSS
    au FileType js,svelte,css,html setlocal expandtab | setlocal wrap | setlocal shiftwidth=2 | setlocal tabstop=2

    " Go
    au Filetype go setlocal makeprg=go\ build
    au Filetype go setlocal noexpandtab
    au Filetype go setlocal tabstop=4
    au Filetype go nnoremap <buffer> <silent> <F5> :!clear; go run %<CR>
    au Filetype go iab <buffer> ife if err != nil {<CR>return err<CR>}<CR>
    au Filetype go iab <buffer> ffi for i := 0; i<; i++ {<CR><CR>}<Esc>2k14li
    au Filetype go iab <buffer> ffr for i, _ := range {<CR><CR>}<Esc>2kf{i
    au Filetype go iab <buffer> inc include (<CR><CR>)<Esc>kcc
    au Filetype go iab <buffer> {{{ {<CR><CR>}<Esc>kcc

    " C
    au Filetype c setlocal tabstop=4
    au Filetype c setlocal noexpandtab

    " Python
    au FileType python setlocal tabstop=4 | setlocal expandtab

augroup END

" }}}///////////////////////////////////////////////////////////////////////////

" ABBREVIATIONS {{{/////////////////////////////////////////////////////////////

ab Prinf Printf
ab Adn And
ab Agressive Aggressive
ab Calender Calendar
ab Clera Clear
ab Definately Definitely
ab Harrass Harass
ab Heigth Height
ab Intput Input
ab Lenght Length
ab Ligth Light
ab Sence Sense
ab Successfull Successful
ab Suprise Surprise
ab Surprice Surprise
ab Teh The
ab Tihs This
ab Widht Width
ab Widht Width

ab adn and
ab agressive aggressive
ab calender calendar
ab clera clear
ab definately definitely
ab harrass harass
ab heigth height
ab intput input
ab lenght length
ab ligth light
ab sence sense
ab successfull successful
ab suprise surprise
ab surprice surprise
ab teh the
ab tihs this
ab widht width
ab retrun return

" }}}///////////////////////////////////////////////////////////////////////////

" vim: set filetype=vim
